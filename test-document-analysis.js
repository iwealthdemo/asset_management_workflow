#!/usr/bin/env node

/**
 * Test Document Analysis and Insights Generation
 * Verifies that summary and insights were actually generated by LLM service
 */

import fetch from 'node-fetch';

const BASE_URL = 'http://localhost:5000';

async function testDocumentAnalysis() {
  console.log('🔍 Testing Document Analysis and Insights Generation\n');

  try {
    // Step 1: Login
    console.log('1️⃣ Logging in...');
    const loginResponse = await fetch(`${BASE_URL}/api/auth/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ username: 'analyst1', password: 'admin123' })
    });

    if (!loginResponse.ok) {
      console.log('❌ Login failed');
      return false;
    }

    const loginData = await loginResponse.json();
    console.log(`✅ Logged in as ${loginData.user.username}`);

    const cookies = loginResponse.headers.get('set-cookie');
    const sessionCookie = cookies ? cookies.split(';')[0] : '';

    // Step 2: Get recent investments to find documents
    console.log('\n2️⃣ Finding recent investments with documents...');
    
    const investmentsResponse = await fetch(`${BASE_URL}/api/investments`, {
      headers: { 'Cookie': sessionCookie }
    });

    if (!investmentsResponse.ok) {
      console.log('❌ Failed to get investments');
      return false;
    }

    const investments = await investmentsResponse.json();
    console.log(`✅ Found ${investments.length} investments`);

    // Find the most recent investment
    const recentInvestment = investments.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))[0];
    
    if (!recentInvestment) {
      console.log('❌ No investments found');
      return false;
    }

    console.log(`📋 Testing with investment ${recentInvestment.id}: ${recentInvestment.targetCompany}`);

    // Step 3: Get documents for this investment
    console.log('\n3️⃣ Getting documents for investment...');
    
    const documentsResponse = await fetch(`${BASE_URL}/api/documents/investment/${recentInvestment.id}`, {
      headers: { 'Cookie': sessionCookie }
    });

    if (!documentsResponse.ok) {
      console.log('❌ Failed to get documents');
      return false;
    }

    const documents = await documentsResponse.json();
    console.log(`✅ Found ${documents.length} documents`);

    if (documents.length === 0) {
      console.log('❌ No documents found for testing');
      return false;
    }

    // Step 4: Check each document's analysis status
    console.log('\n4️⃣ Checking document analysis status...');
    
    for (const doc of documents) {
      console.log(`\n📄 Document: ${doc.originalName} (ID: ${doc.id})`);
      console.log(`   Status: ${doc.analysisStatus}`);
      console.log(`   Analyzed: ${doc.analyzedAt || 'Not yet'}`);
      console.log(`   Classification: ${doc.classification || 'None'}`);
      console.log(`   Risk Level: ${doc.riskLevel || 'Not assessed'}`);
      
      // Test document analysis endpoint
      const analysisResponse = await fetch(`${BASE_URL}/api/documents/${doc.id}/analysis`, {
        headers: { 'Cookie': sessionCookie }
      });

      if (analysisResponse.ok) {
        const analysis = await analysisResponse.json();
        console.log(`   ✅ Analysis available:`);
        console.log(`      Summary: ${analysis.summary ? analysis.summary.substring(0, 100) + '...' : 'No summary'}`);
        console.log(`      Insights: ${analysis.insights ? analysis.insights.substring(0, 100) + '...' : 'No insights'}`);
        console.log(`      Key Info: ${analysis.keyInformation || 'None'}`);
        console.log(`      Risk Assessment: ${analysis.riskAssessment || 'None'}`);
        
        // Check if summary and insights are actually present
        if (analysis.summary && analysis.insights) {
          console.log(`   🎉 FULL ANALYSIS AVAILABLE!`);
          console.log(`      Summary length: ${analysis.summary.length} characters`);
          console.log(`      Insights length: ${analysis.insights.length} characters`);
        } else {
          console.log(`   ⚠️ Missing summary or insights`);
        }
      } else {
        console.log(`   ❌ Analysis not available (${analysisResponse.status})`);
      }

      // Test background job status
      const jobStatusResponse = await fetch(`${BASE_URL}/api/documents/${doc.id}/job-status`, {
        headers: { 'Cookie': sessionCookie }
      });

      if (jobStatusResponse.ok) {
        const jobStatus = await jobStatusResponse.json();
        console.log(`   📊 Job Status: ${jobStatus.status}`);
        console.log(`      Current Step: ${jobStatus.currentStep || 'N/A'}`);
        console.log(`      Progress: ${jobStatus.stepProgress || 0}%`);
        
        if (jobStatus.status === 'completed') {
          console.log(`   ✅ Background processing completed`);
        } else if (jobStatus.status === 'failed') {
          console.log(`   ❌ Background processing failed: ${jobStatus.errorMessage}`);
        }
      }
    }

    // Step 5: Test Direct LLM Service Response
    console.log('\n5️⃣ Testing LLM Service Direct Response...');
    
    const healthResponse = await fetch('https://llm-api-service-vinay2k.replit.app/health');
    if (healthResponse.ok) {
      const health = await healthResponse.json();
      console.log(`✅ LLM Service Status: ${health.status}`);
      console.log(`   Vector Store: ${health.default_vector_store}`);
      console.log(`   OpenAI: ${health.openai_configured ? 'Ready' : 'Not configured'}`);
    }

    console.log('\n📊 Analysis Summary:');
    const processedDocs = documents.filter(d => d.analysisStatus === 'completed');
    const docsWithAnalysis = documents.filter(d => d.classification || d.riskLevel);
    
    console.log(`   Total Documents: ${documents.length}`);
    console.log(`   Processed: ${processedDocs.length}`);
    console.log(`   With Analysis: ${docsWithAnalysis.length}`);
    
    if (processedDocs.length > 0) {
      console.log('\n🎉 SUCCESS: Document processing is working!');
      console.log('   ✅ LLM service integration operational');
      console.log('   ✅ Background job processing completed');
      console.log('   ✅ Document analysis data generated');
    } else {
      console.log('\n⚠️ Documents uploaded but analysis may be pending');
      console.log('   Check background job processor status');
    }

    return true;

  } catch (error) {
    console.log(`\n❌ Analysis test failed: ${error.message}`);
    return false;
  }
}

testDocumentAnalysis()
  .then(success => {
    if (success) {
      console.log('\n✅ Document analysis verification complete!');
    } else {
      console.log('\n❌ Document analysis issues detected');
    }
  })
  .catch(error => {
    console.error('Test execution failed:', error);
  });